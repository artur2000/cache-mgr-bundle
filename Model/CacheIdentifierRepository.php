<?php

namespace Clownfish\CacheMgrBundle\Model;

use Doctrine\ORM\EntityRepository;
use Clownfish\CacheMgrBundle\Cache\IdentifierManager as CacheIdentifierManager;
use Clownfish\CacheMgrBundle\ClownfishCacheMgrBundleCacheIdentifiers;

/**
 * CacheIdentifierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CacheIdentifierRepository extends EntityRepository
{
	/**
	 * Microcache lifetime here just to handle more load but the key retrival cache must be extremly short term
	 */
	const MICROCACHE_LIFETIME = 10;

	/**
	 * Retrive a single entry by the identifier
	 * @param string $identifier
	 * @throws \Exception
	 * @return mixed
	 */
	public function findByChash($identifier) {

		$query = $this->createQueryBuilder('e')
			->where('e.identifier = :identifier')
			->setParameter('identifier', $identifier)
			->getQuery();

		$query->useResultCache(false);

		$cacheKeys = $query->getResult();

		if (count($cacheKeys) > 0) {
			return $cacheKeys[0];
		} else return null;

	}

	/**
	 * @param string $tag
	 * @param CacheIdentifierManager $keyManager
	 * @param CacheIdentifierManager $keyManager
	 * @return mixed
	 */
	public function findByTag($tag, CacheIdentifierManager $keyManager) {

		return $this->findByTagsAnd(array($tag), $keyManager);

	}

	/**
	 * Retrive an array with cache identifiers holding all of some specific tag
	 * @param array $tags
	 * @throws \Exception
	 * @return mixed
	 */
	public function findByTagsAnd(array $tags) {

		$whereBuffer = $params = array();
		foreach ($tags as $key => $tag) {
			$namedKey = 'tag'.$key;
			$whereBuffer[] = 'FIND_IN_SET(:'.$namedKey.', e.tags) > 0';
			$params[$namedKey] = $tag;
		}

		$query = $this->createQueryBuilder('e')
			->where(implode(' AND ', $whereBuffer))
			->setParameters($params)
			->getQuery();

		$cacheKeys = $query->getResult();

		return $cacheKeys;

	}

	/**
	 * Retrive an array with cache identifiers holding at least one specific tag
	 * @param array $tags
	 * @return mixed
	 * @throws \Doctrine\DBAL\DBALException
	 */
	public function findByTagsOr(array $tags) {

		$whereBuffer = $params = array();
		foreach ($tags as $key => $tag) {
			$namedKey = 'tag'.$key;
			$whereBuffer[] = 'FIND_IN_SET(:'.$namedKey.', e.tags)';
			$params[$namedKey] = $tag;
		}

		$query = $this->createQueryBuilder('e')
			->where(implode(' OR ', $whereBuffer))
			->setParameters($params)
			->getQuery();

		$query->useResultCache(false);

		$cacheKeys = $query->getResult();

		return $cacheKeys;

	}

}
